__author__ = 'dan'

import sqlite3
from bottle import route, run, template, debug, request
from datetime import date




@route('/')
@route('/picnic')
def show_picnic():
    db = sqlite3.connect('todo.db')
    c = db.cursor()
    mydate = date.today()

    c.execute("SELECT * FROM todo")
    data = c.fetchall()

    c.execute("SELECT * FROM daytodo")
    data2 = c.fetchall()
    c.execute("SELECT * FROM weektodo")
    data3 = c.fetchall()
    c.execute("SELECT * FROM monthtodo")
    data4 = c.fetchall()
    c.execute("SELECT * FROM overalltodo")
    data5 = c.fetchall()
    print str(data)
    c.close()
    output = template('show_lists', rows=data, rows2=data2, week=data3, month=data4, overall=data5, date = str(mydate))
    return output



@route('/new', method='GET')
def new_item():

    if request.GET.get('save','').strip():

        new = request.GET.get('task','').strip()
        table = request.GET.get('table', '').strip()
        deadline = request.GET.get('deadline').strip()
        starttime = request.GET.get('starttime').strip()
        priority = request.GET.get('priority').strip()
        db = sqlite3.connect('todo.db')
        c = db.cursor()
        c.execute("INSERT INTO "+table + "(task, status, deadline, starttime, priority) VALUES (?, ?, ?, ?, ?)", (new, 1, deadline, starttime, priority))
        new_id = c.lastrowid

        db.commit()
        c.close()
        return '<p>The new task was inserted into the database, the ID is %s</p>' % new_id
    else:
        request.GET.get('passtable','').strip()
        table = request.GET.get('table', '').strip()
        return template('new_task.tpl', table=table)

@route('/edit/:no', method='GET')
def edit_item(no):

    if request.GET.get('save','').strip():
        edit = request.GET.get('task','').strip()
        status = request.GET.get('status','').strip()
        table = request.GET.get('table', '').strip()
        deadline = request.GET.get('deadline', '').strip()

        starttime = request.GET.get('starttime').strip()
        priority = request.GET.get('priority').strip()
        if status == 'open':
            status = 1
        else:
            status = 0

        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        c.execute("UPDATE "+ table+" SET task = ?, status = ?, deadline = ?, starttime = ?, priority = ? WHERE id LIKE ?", (edit,status, deadline, starttime, priority, no))
        conn.commit()

        return '<p>The item number %s was successfully updated</p>' %no

    else:
        request.GET.get('passtable','').strip()
        table = request.GET.get('table', '').strip()

        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        c.execute("SELECT task FROM " + table + " WHERE id LIKE ?", (str(no)))
        cur_data = c.fetchone()
        c.execute("SELECT deadline FROM " + table + " WHERE id LIKE ?", (str(no)))
        deadline = c.fetchone()

        c.execute("SELECT starttime FROM " + table + " WHERE id LIKE ?", (str(no)))
        starttime = c.fetchone()
        c.execute("SELECT priority FROM " + table + " WHERE id LIKE ?", (str(no)))
        priority = c.fetchone()


        return template('edit_task', old = cur_data, no = no, table = table, deadline = deadline, starttime = starttime, priority = priority)



@route('/ref_style')
def server_static():
    return static_file('style.css', root='.')


@route('/delete/:no', method='GET')
def delete_task(no):

    if request.GET.get('save','').strip():

        table = request.GET.get('table', '').strip()


        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        c.execute("DELETE FROM "+ table +" WHERE id LIKE ?", (no))
        conn.commit()

        return '<p>task deleted</p>'

    else:
        request.GET.get('passtable','').strip()
        table = request.GET.get('table', '').strip()

        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        c.execute("SELECT task FROM " +table+" WHERE id LIKE ?", (str(no)))
        cur_data = c.fetchone()

        return template('delete_task', old = cur_data, no = no, table = table)




debug(True)
run(host='0.0.0.0', port=8080, reloader=True)
